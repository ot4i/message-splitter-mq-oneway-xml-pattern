<%
com.ibm.etools.mft.pattern.mbi.plugin.PatternPlugin pattern = com.ibm.etools.mft.pattern.mbi.plugin.PatternPlugin.getInstance();
com.ibm.etools.mft.pattern.mbi.ms.xmlmq.PatternMessages messages = new com.ibm.etools.mft.pattern.mbi.ms.xmlmq.PatternMessages();
%>
<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$
<c:choose>
<c:when test="$root/errorMessageRequired = 'true'" >
DECLARE ErrorLoggingOn EXTERNAL BOOLEAN TRUE;
CREATE FILTER MODULE CheckErrorLogging
</c:when>
<c:otherwise>
CREATE FILTER MODULE CheckErrorLogging
DECLARE ErrorLoggingOn BOOLEAN FALSE;
</c:otherwise>
</c:choose>

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	RETURN ErrorLoggingOn;
	END;
	END MODULE;
	
	CREATE FILTER MODULE CheckSavedMessages
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	IF Environment.PatternVariables.NumberOfBadRecords > 0 THEN RETURN TRUE;
	ELSE RETURN FALSE;
	END IF;
	
	END;
	END MODULE;
CREATE COMPUTE MODULE Build_Error_Message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	
	SET OutputRoot.MQMD = InputRoot.MQMD;
	SET OutputRoot.Properties = NULL;
	Call AddExceptionData();
	
	END;


	CREATE PROCEDURE AddExceptionData() BEGIN
	DECLARE I INTEGER;
	SET I = 0;
	IF Environment.PatternVariables.NumberOfRecordsFound > 0 THEN 
		SET I = Environment.PatternVariables.NumberOfRecordsFound;
	END IF;
	CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN('XMLNSC') NAME 'XMLNSC';
	SET OutputRoot.XMLNSC.Error.BrokerName  = SQL.BrokerName;
	DECLARE ERef REFERENCE TO OutputRoot.XMLNSC.Error;
	SET ERef.MessageFlowLabel = SQL.MessageFlowLabel;
    SET ERef.DTSTAMP =   CURRENT_TIMESTAMP;  
    SET ERef.RecordNumber = I; 
	SET ERef.StatusCode = -1;
     
    -- Add some exception data for error and fault
		DECLARE Error INTEGER;
		DECLARE Text CHARACTER;
		DECLARE Label CHARACTER;
		SET I = 1;
		DECLARE K INTEGER;
		DECLARE start REFERENCE TO InputExceptionList.*[1];

		WHILE start.Number IS NOT NULL DO 
			SET Label = start.Label;
			SET Error = start.Number;
			IF Error = 3001 THEN
				SET Text = start.Insert.Text;
			ELSE
				SET Text = start.Text;
			END IF;
			-- Don't include the "Caught exception and rethrowing message"
			IF Error <> 2230 THEN
				-- Process inserts
				DECLARE Inserts Character;
				DECLARE INS Integer;
				SET Inserts = '';
				-- Are there any inserts for this exception
				IF EXISTS (start.Insert[]) THEN
					-- If YES add them to inserts string
				 	SET Inserts = Inserts || COALESCE(start.Insert[1].Text,'NULL')|| ' / ';
				 	SET K = 1;
				 	INSERTS: LOOP
						IF CARDINALITY(start.Insert[])> K 
						THEN 
							SET Inserts = Inserts || COALESCE(start.Insert[K+1].Text,'NULL')|| ' / ';
						-- No more inserts to process
						ELSE LEAVE INSERTS;
						END IF;
					SET K = K+1;
					END LOOP INSERTS;
				END IF;
				SET ERef.Exception[I].Label = Label;
				SET ERef.Exception[I].Error = Error;
				SET ERef.Exception[I].Text = Text;
				Set ERef.Exception[I].Inserts = COALESCE(Inserts, '');

				SET I = I+1; 
			END IF;
			-- Move start to the last child of the field to which it currently points
			MOVE start LASTCHILD;
		END WHILE;
    END;
END MODULE;

CREATE COMPUTE MODULE BuildFinalMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	SET OutputRoot.MQMD = InputRoot.MQMD;
-- Is a final message required?
	IF Environment.PatternVariables.NumberOfBadRecords = 0 THEN RETURN FALSE;
	END IF;
	SET OutputRoot.MQMD = InputRoot.MQMD;
	CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN('XMLNSC') NAME 'XMLNSC';
	SET OutputRoot.XMLNSC.Error.StatusCode = -1;
	DECLARE ErrorRef REFERENCE TO OutputRoot.XMLNSC.Error;
-- Set up XMLNSC for MQ message   
	SET ErrorRef.DTSTAMP = CURRENT_TIMESTAMP; 
	SET ErrorRef.BrokerName = SQL.BrokerName;
    SET ErrorRef.MessageFlowlabel = SQL.MessageFlowLabel;
    SET ErrorRef.NumberOfBadRecords = Environment.PatternVariables.NumberOfBadRecords;
	SET ErrorRef.BadRecords = Environment.PatternVariables.BadRecords;
	RETURN TRUE;
	END;

END MODULE;
CREATE COMPUTE MODULE Cancel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
	DECLARE FAILURE CHARACTER;
	DECLARE ERRORSTRING CHARACTER;
	DECLARE REC INTEGER 0;
	IF Environment.PatternVariables.RoutingError IS NOT NULL THEN
		-- This is a pattern generate exception
		SET FAILURE = '<%= pattern.getString("com.ibm.etools.mft.pattern.mbi.ms.xmlmq.esql.2") %>'
			||'. '|| Environment.PatternVariables.RoutingError;
		
	THROW USER EXCEPTION SEVERITY 3 MESSAGE 2372 VALUES (FAILURE);
	ELSE
	-- Throw a user error to retain other exception information
		IF Environment.PatternVariables.NumberOfRecordsFound > 0 THEN 
			SET REC = Environment.PatternVariables.NumberOfRecordsFound;
		END IF;
	SET ERRORSTRING = '<%= pattern.getString("com.ibm.etools.mft.pattern.mbi.ms.xmlmq.esql.2") %>'
	|| CAST (REC AS CHARACTER);
	THROW USER EXCEPTION  MESSAGE 3001 VALUES (ERRORSTRING);
	END IF;
	RETURN FALSE;
	END;
	END MODULE;