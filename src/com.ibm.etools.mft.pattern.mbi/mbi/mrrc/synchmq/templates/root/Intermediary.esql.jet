<%
com.ibm.etools.mft.pattern.mbi.plugin.PatternPlugin pattern = com.ibm.etools.mft.pattern.mbi.plugin.PatternPlugin.getInstance();
com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.PatternMessages messages = new com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.PatternMessages();
%>
<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$
DECLARE RequestLoggingOn EXTERNAL BOOLEAN TRUE;
DECLARE ResponseLoggingOn EXTERNAL BOOLEAN TRUE;

CREATE COMPUTE MODULE ExtractOriginalMQMD
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- This is first compute - initialise to indicate Request Leg
		SET Environment.Variables.RRMode = 'Request';
		SET Environment.Variables.RequestLoggingOn = RequestLoggingOn;
	    -- Check that the MQMD Header includes a REPLYTOQ
		IF LENGTH(InputRoot.MQMD.ReplyToQ) = 0 THEN
			THROW USER EXCEPTION SEVERITY 3 MESSAGE 2372 VALUES('<%= pattern.getString("com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.esql.2") %>');
		END IF;

	
		-- Copy the incoming original MQMD
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;

		-- Copy MsgId to CorrelId as the Backend reply application would do
		-- This enables the MQGet node in the Reply flow to retrieve the
		-- corresponding store message by CorrelId even if the requestor did
		-- not send the message as a MQSeries request message
		SET OutputRoot.MQMD.CorrelId = InputRoot.MQMD.MsgId;

		-- Note that we're not copying the message body it is not required
		-- to be stored, we can retrieve the reply to queue from just the MQMD	
	    
	    -- Also save the broker queue manager name to an environment variable so that it can be used in the MQMD header node 
		-- when sending to the provider
		SET Environment.Variables.BrokerQueueManager = SQL.QueueManagerName;
		
		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE Request_Initialise

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		
		SET Environment.Variables.RRMode = 'Request';
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE SetReplyTo

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		-- Specify the reply-to queue in the request set to the Backend
		-- reply application to be the input queue of the reply flow
		-- SET OutputRoot.MQMD.ReplyToQ = '<attr node="entry/target/response" name="queueName"/>';
		SET OutputRoot.MQMD.ReplyToQ = 'MRRC.GETRESPONSE.IN';
		-- Queue Manager for reply is broker queue manager
		SET OutputRoot.MQMD.ReplyToQMgr = SQL.QueueManagerName;
		-- SET Request mode so logging checks are applied correctly

		SET OutputRoot.MQMD.Expiry = -1;
		
		RETURN TRUE;
	END;
END MODULE;
	
CREATE COMPUTE MODULE HandleMQGetWarning
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- The MQGet Node received a MQ Warning
		-- The Tree will contain just a MQMD and any message content received 
		-- in a BLOB, no parsing will be performed.
		-- This could occur if the get options were set to accept truncated
		-- messages. We have not set that option here.
		-- Throw a user exception
		DECLARE reasonStr CHAR;
		SET Environment.Variables.StatusCode = -3; 
		SET reasonStr = '<%= pattern.getString("com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.esql.3") %>';
		THROW USER EXCEPTION SEVERITY 3 MESSAGE 2372 VALUES(reasonStr);
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HandleMissingStoredMsg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- The MQGet Node failed to get a message from the Store Queue
		-- Throw a user exception
		DECLARE reasonStr CHAR;
		SET reasonStr = '<%= pattern.getString("com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.esql.4") %>';
		THROW USER EXCEPTION SEVERITY 3 MESSAGE 2372 VALUES(reasonStr);
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE SetResponseMode
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.Variables.RRMode = 'Response';
		SET Environment.Variables.ResponseLoggingOn = ResponseLoggingOn;

		RETURN TRUE;
		END;
END MODULE;


