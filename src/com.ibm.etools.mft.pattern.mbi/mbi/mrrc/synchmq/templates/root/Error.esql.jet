<%
com.ibm.etools.mft.pattern.mbi.plugin.PatternPlugin pattern = com.ibm.etools.mft.pattern.mbi.plugin.PatternPlugin.getInstance();
com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.PatternMessages messages = new com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.PatternMessages();
%>
<c:if test="boolean($root/brokerSchema)" >
<%-- Tag exists --%>
<c:if test="string-length($root/brokerSchema) > 0">
<%-- and has a value--%>
BROKER SCHEMA <c:get select="$root/brokerSchema"/>
</c:if>
</c:if>
--  Generated by <c:get select="$root/@patternName"/> Version <c:get select="$root/@patternVersion"/>
--  $MQSI patternName=<c:get select="$root/@patternName"/> MQSI$
--  $MQSI patternVersion=<c:get select="$root/@patternVersion"/> MQSI$
 
DECLARE ErrorLoggingOn EXTERNAL BOOLEAN TRUE;
CREATE COMPUTE MODULE Create_Error_Reply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
-- Copy MQMD which contains reply address
	SET OutputRoot.MQMD = InputRoot.MQMD;
-- Set CorrelId to message ID so requester can retrieve by correlId
	SET OutputRoot.MQMD.CorrelId = InputRoot.MQMD.MsgId;
-- Set up Error response
	CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN('XMLNSC') NAME 'XMLNSC';
	SET OutputRoot.XMLNSC.Error.Status = -1;
	SET OutputRoot.XMLNSC.Error.Text = 
	'<%= pattern.getString("com.ibm.etools.mft.pattern.mbi.mrrc.synchmq.esql.9") %>';
	RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE Build_Error_Message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	SET OutputRoot.MQMD = InputRoot.MQMD;
	SET OutputRoot.Properties = NULL;
	Call AddExceptionData();
    END;
	
	CREATE PROCEDURE AddExceptionData() BEGIN
	CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN('XMLNSC') NAME 'XMLNSC';
	SET OutputRoot.XMLNSC.Error.BrokerName  = SQL.BrokerName;
	DECLARE ERef REFERENCE TO OutputRoot.XMLNSC.Error;
	SET ERef.MessageFlowLabel = SQL.MessageFlowLabel; 
    SET ERef.DTSTAMP =   CURRENT_TIMESTAMP;  
	SET ERef.StatusCode = -1;
     
    -- Add some exception data for error and fault
		DECLARE Error INTEGER;
		DECLARE Text CHARACTER;
		DECLARE Label CHARACTER;
		DECLARE I INTEGER 1;
		DECLARE K INTEGER;
		DECLARE start REFERENCE TO InputExceptionList.*[1];

		WHILE start.Number IS NOT NULL DO 
			SET Label = start.Label;
			SET Error = start.Number;
			IF Error = 3001 THEN
				SET Text = start.Insert.Text;
			ELSE
				SET Text = start.Text;
			END IF;
			-- Don't include the "Caught exception and rethrowing message"
			IF Error <> 2230 THEN
				-- Process inserts
				DECLARE Inserts Character;
				DECLARE INS Integer;
				SET Inserts = '';
				-- Are there any inserts for this exception
				IF EXISTS (start.Insert[]) THEN
					-- If YES add them to inserts string
				 	SET Inserts = Inserts || COALESCE(start.Insert[1].Text,'NULL')|| ' / ';
				 	SET K = 1;
				 	INSERTS: LOOP
						IF CARDINALITY(start.Insert[])> K 
						THEN 
							SET Inserts = Inserts || COALESCE(start.Insert[K+1].Text,'NULL')|| ' / ';
						-- No more inserts to process
						ELSE LEAVE INSERTS;
						END IF;
					SET K = K+1;
					END LOOP INSERTS;
				END IF;
				SET ERef.Exception[I].Label = Label;
				SET ERef.Exception[I].Error = Error;
				SET ERef.Exception[I].Text = Text;
				Set ERef.Exception[I].Inserts = COALESCE(Inserts, '');
				
				SET I = I+1; 
			END IF;
			-- Move start to the last child of the field to which it currently points
			MOVE start LASTCHILD;
		END WHILE;

	END;
	

END MODULE;

CREATE FILTER MODULE ErrorQ_check
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
-- Do not write a second error message if this message has already been backed out
	IF Root.MQMD.BackoutCount > 0 THEN RETURN FALSE; 		
	ELSE RETURN ErrorLoggingOn;
	END IF;
	END;
END MODULE;

CREATE FILTER MODULE Request_Check
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
-- Do not send a reply if this message has already been backed out
	IF Root.MQMD.BackoutCount > 0 THEN RETURN FALSE; END IF;
-- Only send a reply if in request mode (do not know where to go if error is in response flow)
	IF  Environment.Variables.RRMode = 'Request' 
	THEN RETURN TRUE;
	ELSE RETURN FALSE;
	END IF;
	END;
END MODULE;