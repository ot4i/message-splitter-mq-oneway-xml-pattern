<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" xml:lang="en-us">
<head><!-- 

(C) COPYRIGHT International Business Machines Corp., 2009

All Rights Reserved * Licensed Materials - Property of IBM

-->
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="copyright" content="Copyright IBM Corporation 2008"/>
<meta name="DC.Rights.Owner" content="Copyright IBM Corporation 2008"/>
<meta name="abstract" content="Use the Message Splitter for WebSphere MQ: one-way (for XML) pattern to accept requests from many client applications on a single queue, and to return responses to the correct client by using transactional flows and persistent WebSphere MQ messages."/>
<!-- Licensed Materials Property of IBM -->
<!-- US Government Users Restricted Rights -->
<!-- Use, duplication or disclosure restricted by -->
<!-- GSA ADP Schedule Contract with IBM Corp. -->
	<link rel="stylesheet" type="text/css" href="../css/style.css" />
<title>Request flow for the Message Splitter for WebSphere MQ: one-way (for XML) pattern</title>
<body id="mbi.mrrc.relmq.requestflow">
<div><h1 class="topictitle1">Request flow for the <span>Message Splitter for WebSphere MQ: one-way (for XML)</span> pattern</h1>
<p class="shortdesc">This pattern uses a single message flow. </p>

<ol>
<li>The Input node expects a well formed XML message and is 
configured to use the XMLNSC parser. If any incoming message contains an MQRFH2 header that
changes the domain, it causes an error and the message is backed out. </li>
<li>Validation of the message is optional and is specified in the 
<span class="msobjprop">Validation required</span> 
pattern parameter.
Validation is not immediate and is carried out as each element is extracted.
</li>
<li>The message flow runs as a transaction and is not committed
unless all required elements are successfully extracted and written to a queue. </li>
<li>The main control in this flow is the Propagate Element Compute node. 
This node creates a local variable to 
hold a mutable tree that is a copy of the input. 
This flow loops through the message tree, moving to a child 
element within a container tag and propagating it onwards.
As each element is selected the previous element is deleted to reduce memory usage.</li>
<li>The structure of the message is determined by the pattern parameters,
and if a message does not conform to this structure an error is produced.</li>
<li>A check is made that the message includes the container path, that is, the container for all of the 
elements to be	processed. If this container path is specified as <span class="msobjpropval">*:*</span>, 
the container is considered to be the root tag, whatever its name, and
message elements that are children of the root are extracted.</li>
<li>If the <span class="msobjprop">Message element name</span> pattern parameter is 
<span class="msobjpropval">*:*</span>, all elements 
that are children of the container are processed.
If any other value is specified, only message elements that have tags that match the 
<span class="msobjprop">Message element name</span> are extracted.
The extracted message element is passed on  for further processing. </li>
<li>The message flow includes the MessageProcessor subflow, which by default has no impact
because it contains only a Passthrough node. The subflow is included to provide a place where a
pattern instance can be customized by using standard tooling, without any changes to the structure of
the pattern.</li>
<li>The message is passed to the Route subflow, which  directs it to the correct WebSphere MQ queue. 
Failure to find a route, or any exception, sets the failure status and 
directs control to the Failure node.
	<ul><li>If the <span class="msobjprop">Bad message action</span> is <span class="msobjpropval">Save</span>, 
	the Failure node is connected to an MQOutput node to save
	the message. Control  returns to the Compute node to extract the next element.</li>
	<li>If the <span class="msobjprop">Bad message action</span> is <span class="msobjpropval">Cancel</span>, the 
	Failure node is not connected and the Compute node  produces a user error
	causing the flow to back out.</li></ul>
	</li>
<li>When a move to next element fails, because all of the elements have been processed, 
the Log subflow is called, if logging is required by the pattern parameters. 
At this point the message flow always stops successfully
and the transaction is committed. Any errors that occur in logging are caught and processed 
by writing to a Trace node.</li>
<li>If the <span class="msobjprop">Routing</span> parameter is 
set to <span class="msobjpropval">Lookup Routes</span> and the 
<span class="msobjprop">Cache refresh</span> 
pattern parameter specifies that a cache refresh is required, the main flow contains a second Input 
node that reads from the queue that is defined by the <span class="msobjprop">Refresh queue</span> 
pattern parameter. Any message that is sent to this queue
clears the shared variable <span class="filepath">CacheQueueTable.valid</span>, so that the cache is
refreshed before the next look up.</li>
</ol>
</div>
<a href="overview.htm#anchor1" title="Back">Back to the Message Splitter for WebSphere MQ: one-way (for XML) pattern specification</a>
</body>
</html>